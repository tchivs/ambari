name: Build and Release 2.7.*

on:
  push:
    branches: 
      - branch-2.7.*
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: RHEL
            package_extension: 'rpm'
          - platform: Ubuntu
            package_extension: 'jdeb'
    env:
      VERSION: 2.7.7.0.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'

      # 缓存 Maven 依赖项
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/apache
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Check versions
        run: |
          java -version
          javac -version
          mvn -version
          python --version

      - name: Use Node.js v14
        uses: actions/setup-node@v4
        with:
          node-version: v14
      - name: npm install
        run: |
          npm install -g brunch

      - name: Use VERSION environment variable
        run: echo "The version is $VERSION"

      - name: Build Package
        run: |
          mvn versions:set -DnewVersion=$VERSION
          pushd ambari-metrics
          mvn versions:set -DnewVersion=$VERSION
          popd
          mvn -B clean install ${{ matrix.package_extension }}:${{ matrix.package_extension }} -DnewVersion=$VERSION -DbuildNumber=${{ github.sha }} -DskipTests -Drat.skip=true -Dpython.ver="python >= 2.6"
      
      - name: Print RAT Report
        if: failure() # 只有在之前的步骤失败时才执行
        run: cat /home/runner/work/ambari/ambari/target/rat.txt

        #列出m2目录的内容并按大小排序。
      - name: List cached directories
        run: |
          echo "Listing the contents of the .m2/repository directory sorted by size:"
          du -hs ~/.m2/repository/* | sort -hr

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release $VERSION
          draft: false
          prerelease: false

      - name: Upload Package to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/*.${{ matrix.package_extension }}
          asset_name: $VERSION-${{ matrix.platform }}.${{ matrix.package_extension }}
          asset_content_type: application/octet-stream